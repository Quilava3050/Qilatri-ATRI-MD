import fetch from 'node-fetch';

let handler = async (m, {
  conn,
  text,
  usedPrefix,
  command
}) => {
  if (command == 'bing') {
    if (!text) throw `*️⃣ Contoh: ${usedPrefix + command} siapa presiden Indonesia?*\n\n_Ketik pertanyaanmu dan Bing AI akan menjawab_ 🤖`;
    try {
      m.reply('🔍 Searching answer...')
      let response = await fetch('https://api.botcahx.eu.org/api/search/bing-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: text,
            apikey: btc
          })
        })
        .then(res => res.json());

      let formattedResponse = `*🤖 BING AI ANSWER*\n\n` +
        `📝 *Question:* ${text}\n\n` +
        `💭 *Answer:*\n${response.message}\n\n` +
        `✨ _Powered by Bing AI_`;

      await conn.reply(m.chat, formattedResponse, m);
    } catch (e) {
      console.log(e);
      throw `❌ *Error:* ${eror}`;
    }
  }
  if (command == 'bingimg') {
    if (!text) throw `🎨 *Contoh:* ${usedPrefix + command} anak berlari menggunakan pakaian merah 3d animation\n\n_Ketik prompt-mu dan Bing akan membuatkan gambar_ ✨`;
    try {
      m.reply('🎨 Generating your imagination...')
      let response = await fetch('https://api.botcahx.eu.org/api/search/bing-img', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: text,
            apikey: btc
          })
        })
        .then(res => res.json());

      for (let i = 0; i < 4; i++) {
        let img = response.result[i]
        await sleep(3000)
        await conn.sendFile(m.chat, img, 'bing_img.png', `🎭 *BING IMAGE*\n\n🎨 *Prompt:* ${text}\n\n✨ _Generated by Bing AI_`, m)
      }
    } catch (error) {
      throw `❌ *Error:* ${eror}`
    }
  }
}

handler.command = handler.help = ['bing', 'bingimg']

//handler.command = handler.help = ['bing']
handler.tags = ['ai'];
handler.limit = true

export default handler;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}